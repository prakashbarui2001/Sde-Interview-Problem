class Solution {
public:
    
    
    int largestareaofhisogram(vector<int>&arr){
        stack<pair<int ,int>>st;
       stack<pair<int,int>>st2;
       vector<int>right;
       vector<int>left;
       // nearest greater to the right index
        int n=arr.size();
       for(int i=n-1;i>=0;--i){
           
              if(st.size()==0){
                  right.push_back(n);
              }
              else if(!st.empty() && st.top().first<arr[i]){
                  right.push_back(st.top().second);
              }
              else if(!st.empty() && st.top().first >=arr[i]){
                  while(!st.empty() && st.top().first >=arr[i]){
                      st.pop();
                  }
                  if(st.empty()){
                      right.push_back(n);
                  }
                  else{
                      right.push_back(st.top().second);
                  }
                  
              }
              st.push({arr[i],i});
       }
       reverse(right.begin(),right.end());
       //nearsest smaller to the left index
       for(int i=0;i<n;++i){
           
              if(st2.size()==0){
                  left.push_back(-1);
              }
              else if(!st2.empty() && st2.top().first<arr[i]){
                  left.push_back(st2.top().second);
              }
              else if(!st2.empty() && st2.top().first >=arr[i]){
                  while(!st2.empty() && st2.top().first >=arr[i]){
                      st2.pop();
                  }
                  if(st2.empty()){
                      left.push_back(-1);
                  }
                  else{
                      left.push_back(st2.top().second);
                  }
                  
              }
              st2.push({arr[i],i});
       }
      // create base array 
      vector<int>base;
      for(int i=0;i<n;++i){
          base.push_back(right[i]-left[i]-1);
      }
      vector<int>area;
     // find the maximum area of each max area of histogram
     for(int i=0;i<n;++i){
         
         area.push_back(arr[i]*base[i]);
     }
    /* for(int i=0;i<n;++i){
         cout<<area[i]<<" ";
     }
     */
     
     int maxarea=0;
     for(int i =0;i<n;++i){
         maxarea=max(maxarea,area[i]);
     }
     return maxarea;
    }
    /*********************************************************/
    
    int maximalRectangle(vector<vector<char>>& arr) {
        
             int n=arr.size();
        int m=arr[0].size();
        vector<int>v(m,0);
        if(n==0)
            return 0;
        int result=0;
        /*  We are find individual histogram of each row in the binary matrix.
        for(int i=0;i<n;++i){
            for(int j=0;j<m;++j){
                
                if(arr[i][j]=='0'){
                    v[j]=0;
                }
                else{
                    v[j]+=1;
                }
            }
            result=max(result,largestareaofhisogram(v));
        }
        return result;
        
    }
    
};
